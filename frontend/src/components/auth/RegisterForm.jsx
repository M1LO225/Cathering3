// frontend/src/components/auth/RegisterForm.jsx (CÃ“DIGO CORREGIDO)

import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import Input from '../common/Input';
import Button from '../common/Button';
import { useNavigate } from 'react-router-dom';

const RegisterForm = () => {
Â  const [formData, setFormData] = useState({
Â  Â  username: '',
Â  Â  email: '',
Â  Â  password: '',
Â  Â  confirmPassword: '',
Â  });
Â  
Â  // ðŸš¨ Solo desestructuramos lo necesario, el estado 'error' del useAuth 
Â  // es para la inicializaciÃ³n. Usaremos un estado local 'submitError'.
Â  const { register, loading } = useAuth(); 
Â  const navigate = useNavigate();
Â  
Â  const [successMessage, setSuccessMessage] = useState('');
Â  const [submitError, setSubmitError] = useState(null); // ðŸš¨ Nuevo estado para errores de envÃ­o

Â  const handleChange = (e) => {
Â  Â  setFormData({ ...formData, [e.target.name]: e.target.value });
Â  Â  setSuccessMessage('');
Â  Â  setSubmitError(null); // Limpiar errores al cambiar
Â  };

Â  const handleSubmit = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setSuccessMessage('');
Â  Â  setSubmitError(null);

Â  Â  if (formData.password !== formData.confirmPassword) {
Â  Â  Â  setSubmitError('Las contraseÃ±as no coinciden.');
Â  Â  Â  return;
Â  Â  }

    try {
        await register(
            formData.username, 
            formData.email, 
            formData.password
        );

        // ðŸ’¥ REGISTRO EXITOSO: Mostrar mensaje y redirigir
        setSuccessMessage('Â¡Registro exitoso! SerÃ¡s redirigido al Login.');
        setFormData({ username: '', email: '', password: '', confirmPassword: '' });
        
        // Redirigir al Login despuÃ©s de 2 segundos
        setTimeout(() => navigate('/login'), 2000); 

    } catch (error) {
        // ðŸ’¥ REGISTRO FALLIDO: Mostrar el mensaje de error del backend
        setSubmitError(error.message || 'Error desconocido durante el registro.');
    }
Â  };

Â  return (
Â  Â  <form onSubmit={handleSubmit} style={{ maxWidth: '400px', margin: '0 auto', padding: '20px', border: '1px solid #ddd', borderRadius: '8px' }}>
Â  Â  Â  <h2>Registro de Usuario</h2>
Â  Â  Â  
Â  Â  Â  {/* ðŸš¨ USAR el nuevo estado de error de envÃ­o */}
Â  Â  Â  {submitError && <p style={{ color: 'red' }}>Error: {submitError}</p>}
Â  Â  Â  {successMessage && <p style={{ color: 'green' }}>{successMessage}</p>}
Â  Â  Â  {/* ... (resto de tus Input y Button) */}
Â  Â  
      <Input
        label="Nombre de Usuario"
        id="username"
        name="username"
        value={formData.username}
        onChange={handleChange}
        required
      />
      <Input
        label="Email"
        id="email"
        name="email"
        type="email"
        value={formData.email}
        onChange={handleChange}
        required
      />
      <Input
        label="ContraseÃ±a"
        id="password"
        name="password"
        type="password"
        value={formData.password}
        onChange={handleChange}
        required
      />
      <Input
        label="Confirmar ContraseÃ±a"
        id="confirmPassword"
        name="confirmPassword"
        type="password"
        value={formData.confirmPassword}
        onChange={handleChange}
        required
      />

Â  Â  Â  <Button type="submit" disabled={loading} style={{ width: '100%', marginTop: '10px' }}>
Â  Â  Â  Â  {loading ? 'Registrando...' : 'Registrarse'}
Â  Â  Â  </Button>
Â  Â  </form>
Â  );
};

export default RegisterForm;